<?php

declare(strict_types=1);

namespace Sypa\Generator\Hydrator\Sale;

use Sypa\Generator\Factory\DateTimeFactory;
use Sypa\Model\Sale\Order;

class OrderHydrator {
    const REQUIRED_DATA = [
        'order_id',
        'invoice_no',
        'invoice_prefix',
        'store_id',
        'store_name',
        'store_url',
        'customer_id',
        'customer_group_id',
        'firstname',
        'lastname',
        'email',
        'telephone',
        'fax',
        'custom_field',
        'payment_firstname',
        'payment_lastname',
        'payment_company',
        'payment_address_1',
        'payment_address_2',
        'payment_city',
        'payment_postcode',
        'payment_country',
        'payment_country_id',
        'payment_zone',
        'payment_zone_id',
        'payment_address_format',
        'payment_custom_field',
        'payment_method',
        'payment_code',
        'shipping_firstname',
        'shipping_lastname',
        'shipping_company',
        'shipping_address_1',
        'shipping_address_2',
        'shipping_city',
        'shipping_postcode',
        'shipping_country',
        'shipping_country_id',
        'shipping_zone',
        'shipping_zone_id',
        'shipping_address_format',
        'shipping_custom_field',
        'shipping_method',
        'shipping_code',
        'comment',
        'total',
        'order_status_id',
        'affiliate_id',
        'commission',
        'marketing_id',
        'tracking',
        'language_id',
        'currency_id',
        'currency_code',
        'currency_value',
        'ip',
        'forwarded_ip',
        'user_agent',
        'accept_language',
        'date_added',
        'date_modified'
    ];
    private DateTimeFactory $dateTimeFactory;

    /**
     * @param DateTimeFactory $dateTimeFactory
     */
    public function __construct(DateTimeFactory $dateTimeFactory) {
        $this->dateTimeFactory = $dateTimeFactory;
    }

    /**
     * @param array $data
     * @return Order
     * @throws \Exception
     */
    public function hydrate(array $data): Order {
        foreach (self::REQUIRED_DATA as $required_data) {
            if (array_key_exists($required_data, $data) === false) {
                throw new \InvalidArgumentException(sprintf(
                    "Unable to create Order from data. Missing '%s'.",
                    $required_data
                ));
            }
        }

        list(
            'order_id'                => $order_id,
            'invoice_no'              => $invoice_no,
            'invoice_prefix'          => $invoice_prefix,
            'store_id'                => $store_id,
            'store_name'              => $store_name,
            'store_url'               => $store_url,
            'customer_id'             => $customer_id,
            'customer_group_id'       => $customer_group_id,
            'firstname'               => $firstname,
            'lastname'                => $lastname,
            'email'                   => $email,
            'telephone'               => $telephone,
            'fax'                     => $fax,
            'custom_field'            => $custom_field,
            'payment_firstname'       => $payment_firstname,
            'payment_lastname'        => $payment_lastname,
            'payment_company'         => $payment_company,
            'payment_address_1'       => $payment_address_1,
            'payment_address_2'       => $payment_address_2,
            'payment_city'            => $payment_city,
            'payment_postcode'        => $payment_postcode,
            'payment_country'         => $payment_country,
            'payment_country_id'      => $payment_country_id,
            'payment_zone'            => $payment_zone,
            'payment_zone_id'         => $payment_zone_id,
            'payment_address_format'  => $payment_address_format,
            'payment_custom_field'    => $payment_custom_field,
            'payment_method'          => $payment_method,
            'payment_code'            => $payment_code,
            'shipping_firstname'      => $shipping_firstname,
            'shipping_lastname'       => $shipping_lastname,
            'shipping_company'        => $shipping_company,
            'shipping_address_1'      => $shipping_address_1,
            'shipping_address_2'      => $shipping_address_2,
            'shipping_city'           => $shipping_city,
            'shipping_postcode'       => $shipping_postcode,
            'shipping_country'        => $shipping_country,
            'shipping_country_id'     => $shipping_country_id,
            'shipping_zone'           => $shipping_zone,
            'shipping_zone_id'        => $shipping_zone_id,
            'shipping_address_format' => $shipping_address_format,
            'shipping_custom_field'   => $shipping_custom_field,
            'shipping_method'         => $shipping_method,
            'shipping_code'           => $shipping_code,
            'comment'                 => $comment,
            'total'                   => $total,
            'order_status_id'         => $order_status_id,
            'affiliate_id'            => $affiliate_id,
            'commission'              => $commission,
            'marketing_id'            => $marketing_id,
            'tracking'                => $tracking,
            'language_id'             => $language_id,
            'currency_id'             => $currency_id,
            'currency_code'           => $currency_code,
            'currency_value'          => $currency_value,
            'ip'                      => $ip,
            'forwarded_ip'            => $forwarded_ip,
            'user_agent'              => $user_agent,
            'accept_language'         => $accept_language,
            'date_added'              => $date_added,
            'date_modified'           => $date_modified
        ) = $data;

        return new Order(
            $order_id,
            $invoice_no,
            $invoice_prefix,
            $store_id,
            $store_name,
            $store_url,
            $customer_id,
            $customer_group_id,
            $firstname,
            $lastname,
            $email,
            $telephone,
            $fax,
            $custom_field,
            $payment_firstname,
            $payment_lastname,
            $payment_company,
            $payment_address_1,
            $payment_address_2,
            $payment_city,
            $payment_postcode,
            $payment_country,
            $payment_country_id,
            $payment_zone,
            $payment_zone_id,
            $payment_address_format,
            $payment_custom_field,
            $payment_method,
            $payment_code,
            $shipping_firstname,
            $shipping_lastname,
            $shipping_company,
            $shipping_address_1,
            $shipping_address_2,
            $shipping_city,
            $shipping_postcode,
            $shipping_country,
            $shipping_country_id,
            $shipping_zone,
            $shipping_zone_id,
            $shipping_address_format,
            $shipping_custom_field,
            $shipping_method,
            $shipping_code,
            $comment,
            $total,
            $order_status_id,
            $affiliate_id,
            $commission,
            $marketing_id,
            $tracking,
            $language_id,
            $currency_id,
            $currency_code,
            $currency_value,
            $ip,
            $forwarded_ip,
            $user_agent,
            $accept_language,
            $this->dateTimeFactory->makeDateTimeImmutable($date_added),
            $this->dateTimeFactory->makeDateTimeImmutable($date_modified)
        );
    }

    /**
     * @param Order $order
     * @return array<string, mixed>
     */
    public function extract(Order $order): array {
        return [
            'order_id'                => $order->getOrderId(),
            'invoice_no'              => $order->getInvoiceNo(),
            'invoice_prefix'          => $order->getInvoicePrefix(),
            'store_id'                => $order->getStoreId(),
            'store_name'              => $order->getStoreName(),
            'store_url'               => $order->getStoreUrl(),
            'customer_id'             => $order->getCustomerId(),
            'customer_group_id'       => $order->getCustomerGroupId(),
            'firstname'               => $order->getFirstname(),
            'lastname'                => $order->getLastname(),
            'email'                   => $order->getEmail(),
            'telephone'               => $order->getTelephone(),
            'fax'                     => $order->getFax(),
            'custom_field'            => $order->getCustomField(),
            'payment_firstname'       => $order->getPaymentFirstname(),
            'payment_lastname'        => $order->getPaymentLastname(),
            'payment_company'         => $order->getPaymentCompany(),
            'payment_address_1'       => $order->getPaymentAddress1(),
            'payment_address_2'       => $order->getPaymentAddress2(),
            'payment_city'            => $order->getPaymentCity(),
            'payment_postcode'        => $order->getPaymentPostcode(),
            'payment_country'         => $order->getPaymentCountry(),
            'payment_country_id'      => $order->getPaymentCountryId(),
            'payment_zone'            => $order->getPaymentZone(),
            'payment_zone_id'         => $order->getPaymentZoneId(),
            'payment_address_format'  => $order->getPaymentAddressFormat(),
            'payment_custom_field'    => $order->getPaymentCustomField(),
            'payment_method'          => $order->getPaymentMethod(),
            'payment_code'            => $order->getPaymentCode(),
            'shipping_firstname'      => $order->getShippingFirstname(),
            'shipping_lastname'       => $order->getShippingLastname(),
            'shipping_company'        => $order->getShippingCompany(),
            'shipping_address_1'      => $order->getShippingAddress1(),
            'shipping_address_2'      => $order->getShippingAddress2(),
            'shipping_city'           => $order->getShippingCity(),
            'shipping_postcode'       => $order->getShippingPostcode(),
            'shipping_country'        => $order->getShippingCountry(),
            'shipping_country_id'     => $order->getShippingCountryId(),
            'shipping_zone'           => $order->getShippingZone(),
            'shipping_zone_id'        => $order->getShippingZoneId(),
            'shipping_address_format' => $order->getShippingAddressFormat(),
            'shipping_custom_field'   => $order->getShippingCustomField(),
            'shipping_method'         => $order->getShippingMethod(),
            'shipping_code'           => $order->getShippingCode(),
            'comment'                 => $order->getComment(),
            'total'                   => $order->getTotal(),
            'order_status_id'         => $order->getOrderStatusId(),
            'affiliate_id'            => $order->getAffiliateId(),
            'commission'              => $order->getCommission(),
            'marketing_id'            => $order->getMarketingId(),
            'tracking'                => $order->getTracking(),
            'language_id'             => $order->getLanguageId(),
            'currency_id'             => $order->getCurrencyId(),
            'currency_code'           => $order->getCurrencyCode(),
            'currency_value'          => $order->getCurrencyValue(),
            'ip'                      => $order->getIp(),
            'forwarded_ip'            => $order->getForwardedIp(),
            'user_agent'              => $order->getUserAgent(),
            'accept_language'         => $order->getAcceptLanguage(),
            'date_added'              => $order->getDateAdded(),
            'date_modified'           => $order->getDateModified()
        ];
    }
}
